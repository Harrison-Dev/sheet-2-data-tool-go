name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run tests
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
    - name: Check test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80.0" | bc -l) )); then
          echo "Coverage $COVERAGE% is below required 80%"
          exit 1
        fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out results.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: [test, lint]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary: excel-schema-generator
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary: excel-schema-generator.exe
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary: excel-schema-generator
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev xorg-dev
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # Fyne dependencies are usually available on macOS
        echo "macOS dependencies ready"
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: go build -v -ldflags="-s -w" -o ${{ matrix.binary }} .
    
    - name: Test binary
      if: runner.os != 'Windows'
      run: ./${{ matrix.binary }} --help || true
    
    - name: Test binary (Windows)
      if: runner.os == 'Windows'
      run: .\${{ matrix.binary }} --help || echo "Binary test completed"
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-binary
        path: ${{ matrix.binary }}
        retention-days: 7

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: always()
    steps:
    - name: Check job results
      run: |
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "Tests failed"
          exit 1
        fi
        if [[ "${{ needs.lint.result }}" != "success" ]]; then
          echo "Linting failed"
          exit 1
        fi
        if [[ "${{ needs.security.result }}" != "success" ]]; then
          echo "Security scan failed"
          exit 1
        fi
        if [[ "${{ needs.build.result }}" != "success" ]]; then
          echo "Build failed"
          exit 1
        fi
        echo "All quality gates passed! âœ…"